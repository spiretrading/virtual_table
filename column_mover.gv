digraph ColumnMover{
  rankdir=LR;
  node [shape = circle, fontsize = 10];
  edge [ fontsize = 10];

  s0 [label="s1: rest state" color = green, fontcolor = green];
  s1 [label="s1: initalize"];
  s2 [label="s2: show floating column and table gap"];
  s3 [label="s3: evaluate move"];

  s0 -> s1 [label = "E0 - mouseDown(columnIndex: number)"]

  s1 -> s2  [label = "&#949;"];

  s2 -> s3 [label = "E1 - mouseMove(currentX, currentY)"];

  s3 -> s2 [label = "&#949;"];

  s2 -> s0 [label = "E2 - mouseUp()"];

  { rank=same; s1, s3 }
}

/**
Proprties:
columnWidths: number[] - async

Parameters:
isMoving(boolean) - Indicates if the user is in the middle of a resize action
movingColumnIndex - number 
movingColumnOffset: number;
slidingColumnXPosition: number;
slidingColumnYPosition: number;
initialXPosition: number;
initialYPositon: number;
currentXPosition: number;
currentYPositon: number;

States:
s0: Rest State
- isMoving = false
- Listen for a mouseDown event on a header

s1: Initialize
- isMoving = true
- movingColumn = columnIndex
- movingColumnOffset = sum of all the column widths that are displayed before movingColumn
- movingColumnXPosition = movingColumnOffset
- movingColumnYPosition = 0
- initialXPosition = currentXPosition
- initialYPositon = currentYPosition

s2: Show FloatingColumn
- Display the floating column and the gap in the table
- Listen for mouseMove

s3: Evaluate Move
- Determine new floating column position
  movingColumnXPosition = sum of all the column widths that are displayed before movingColumn +
    currentX - initialXPosition
  movingColumnYPosition = Math.min(header_height, currentY - initialYPositon)
- Determine if movingColumn should move to a new index
  movingColumnIndex = newIndex

E0 - mouseDown(columnIndex: number, currentX:number, currentY: number)
E1 - mouseMove(currentX:number, currentY: number)
E2 - mouseUp()

*/
